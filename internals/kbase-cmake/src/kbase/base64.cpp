/*
 @ 0xCCCCCCCC
*/

#include "kbase/base64.h"

#include "kbase/scope_guard.h"

namespace {

using kbase::byte;

constexpr char kPadding = '=';
constexpr byte kBadChar = 0x40;

// Data as follows are generated by http://goo.gl/X6YQ7Y.

constexpr char kCipher0[256] {
    'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C',
    'D', 'D', 'D', 'D', 'E', 'E', 'E', 'E', 'F', 'F', 'F', 'F',
    'G', 'G', 'G', 'G', 'H', 'H', 'H', 'H', 'I', 'I', 'I', 'I',
    'J', 'J', 'J', 'J', 'K', 'K', 'K', 'K', 'L', 'L', 'L', 'L',
    'M', 'M', 'M', 'M', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O',
    'P', 'P', 'P', 'P', 'Q', 'Q', 'Q', 'Q', 'R', 'R', 'R', 'R',
    'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U',
    'V', 'V', 'V', 'V', 'W', 'W', 'W', 'W', 'X', 'X', 'X', 'X',
    'Y', 'Y', 'Y', 'Y', 'Z', 'Z', 'Z', 'Z', 'a', 'a', 'a', 'a',
    'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'd', 'd', 'd', 'd',
    'e', 'e', 'e', 'e', 'f', 'f', 'f', 'f', 'g', 'g', 'g', 'g',
    'h', 'h', 'h', 'h', 'i', 'i', 'i', 'i', 'j', 'j', 'j', 'j',
    'k', 'k', 'k', 'k', 'l', 'l', 'l', 'l', 'm', 'm', 'm', 'm',
    'n', 'n', 'n', 'n', 'o', 'o', 'o', 'o', 'p', 'p', 'p', 'p',
    'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 's', 's', 's', 's',
    't', 't', 't', 't', 'u', 'u', 'u', 'u', 'v', 'v', 'v', 'v',
    'w', 'w', 'w', 'w', 'x', 'x', 'x', 'x', 'y', 'y', 'y', 'y',
    'z', 'z', 'z', 'z', '0', '0', '0', '0', '1', '1', '1', '1',
    '2', '2', '2', '2', '3', '3', '3', '3', '4', '4', '4', '4',
    '5', '5', '5', '5', '6', '6', '6', '6', '7', '7', '7', '7',
    '8', '8', '8', '8', '9', '9', '9', '9', '+', '+', '+', '+',
    '/', '/', '/', '/'
};

constexpr char kCipher1[64] {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
    'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9', '+', '/'
};

constexpr char kCipher2[256] {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
    'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9', '+', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
    'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
    's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',
    '4', '5', '6', '7', '8', '9', '+', '/', 'A', 'B', 'C', 'D',
    'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b',
    'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/',
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
    'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9', '+', '/'
};

constexpr byte kCode[256] {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF, 0xFF, 0xFF, 0x3F,
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
    0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12,
    0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
    0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
    0x31, 0x32, 0x33, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF
};

// ceil(PTL / 3) * 4 == floor(PTL + 3 - 1 / 3) * 4
size_t EncodeLength(size_t plain_text_len) noexcept
{
    return (plain_text_len + 2) / 3 * 4;
}

size_t DecodeLength(size_t cipher_len, size_t padding_count) noexcept
{
    size_t chunk = padding_count ? (cipher_len >> 2) : (cipher_len >> 2) - 1;
    return (chunk + 1) * 3 - padding_count;
}

template<typename Container>
void Encode(const byte* data, size_t len, Container& result)
{
    result.clear();
    result.resize(EncodeLength(len), 0);

    byte t0, t1, t2;
    size_t i = 0;
    char* p = &result[0];

    if (len >= 3) {
        for (; i < len - 2; i += 3) {
            t0 = data[i];
            t1 = data[i+1];
            t2 = data[i+2];
            *p++ = kCipher0[t0];
            *p++ = kCipher1[((t0 & 0x03) << 4) | ((t1 >> 4) & 0x0F)];
            *p++ = kCipher1[((t1 & 0x0F) << 2) | ((t2 >> 6) & 0x03)];
            *p++ = kCipher2[t2];
        }
    }

    switch (len - i) {
        case 0:
            break;

        case 1:
            t0 = data[i];
            *p++ = kCipher0[t0];
            *p++ = kCipher1[(t0 & 0x03) << 4];
            *p++ = kPadding;
            *p = kPadding;
            break;

        // Case 2 actually.
        default:
            t0 = data[i];
            t1 = data[i+1];
            *p++ = kCipher0[t0];
            *p++ = kCipher1[((t0 & 0x03) << 4) | ((t1 >> 4) & 0x0F)];
            *p++ = kCipher1[(t1 & 0x0F) << 2];
            *p = kPadding;
    }
}

template<typename Container>
void Decode(const byte* data, size_t len, Container& result)
{
    result.clear();

    if (len == 0 || (len % 4 != 0)) {
        return;
    }

    // Rip off paddings if any.
    size_t valid_len = len;
    size_t number_of_padding = 0;
    if (data[len-1] == kPadding) {
        --valid_len;
        ++number_of_padding;
        if (data[len-2] == kPadding) {
            --valid_len;
            ++number_of_padding;
        }
    }

    result.resize(DecodeLength(valid_len, number_of_padding), 0);
    auto clear_on_error = MAKE_SCOPE_GUARD { result.clear(); };

    auto p = &result[0];
    byte c0, c1, c2, c3;
    size_t i = 0;
    if (valid_len >= 4) {
        for (; i < valid_len - 3; i += 4) {
            c0 = kCode[data[i]];
            c1 = kCode[data[i+1]];
            c2 = kCode[data[i+2]];
            c3 = kCode[data[i+3]];

            // Valid code range.
            if ((c0 | c1 | c2 | c3) >= kBadChar) {
                return;
            }

            *p++ = (c0 << 2) | ((c1 >> 4) & 0x03);
            *p++ = (c1 << 4) | ((c2 >> 2) & 0x0F);
            *p++ = (c2 << 6) | c3;
        }
    }

    switch (valid_len - i) {
        case 0:
            break;

        case 2:
            c0 = kCode[data[i]];
            c1 = kCode[data[i+1]];
            if ((c0 | c1) >= kBadChar) {
                return;
            }

            *p = (c0 << 2) | ((c1 >> 4) & 0x03);
            break;

        case 3:
            c0 = kCode[data[i]];
            c1 = kCode[data[i + 1]];
            c2 = kCode[data[i + 2]];
            if ((c0 | c1 | c2) >= kBadChar) {
                return;
            }

            *p++ = (c0 << 2) | ((c1 >> 4) & 0x03);
            *p = (c1 << 4) | ((c2 >> 2) & 0x0F);
            break;

        // Abnormal cases.
        default:
            return;
    }

    clear_on_error.Dismiss();
}

}   // namespace

namespace kbase {

std::string Base64Encode(StringView src)
{
    std::string encoded;
    Encode<std::string>(reinterpret_cast<const byte*>(src.data()), src.size(), encoded);

    return encoded;
}

std::string Base64Encode(const void* data, size_t len)
{
    std::string encoded;
    Encode<std::string>(static_cast<const byte*>(data), len, encoded);

    return encoded;
}

std::vector<byte> Base64Decode(const void* data, size_t len)
{
    std::vector<byte> decoded;
    Decode<std::vector<byte>>(static_cast<const byte*>(data), len, decoded);

    return decoded;
}

std::string Base64Decode(StringView src)
{
    std::string decoded;
    Decode<std::string>(reinterpret_cast<const byte*>(src.data()), src.size(), decoded);

    return decoded;
}

}   // namespace kbase
